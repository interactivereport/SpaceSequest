[["index.html", "SpaceSequest: A unified pipeline for spatial transcriptomics data analysis Preface", " SpaceSequest: A unified pipeline for spatial transcriptomics data analysis Authors: Yu (Henry) Sun1, Sarbottam Piya1, Zhengyu Ouyang2, Yirui Chen1, Jake Gagnon3, Shaolong Cao1, Haotian Zhang1, Baobao Song1, Jing Zhu1, Khyati Chandratre1, Houlin Yu1, Wenxing Hu1, Matthew Ryals4, Fergal Casey1, Dann Huh1, Mingyao Li5, Baohong Zhang1 Affiliations: 1Research, Biogen Inc., Cambridge, MA, 02142, USA 2Data Science, BioInfoRx Inc., Madison, WI, 53719, USA 3Biostatistics, Biogen Inc., Cambridge, MA, 02142, USA 4PharmaLex, 1700 District Ave., Burlington, MA, 01803, USA 5Department of Biostatistics, Epidemiology and Informatics, Perelman School of Medicine, University of Pennsylvania, Philadelphia, PA, 19104, USA These authors contribute equally, Yu (Henry) Sun, Sarbottam Piya, Zhengyu Ouyang Correspondence: Yu (Henry) Sun, yuhenry.sun@biogen.com 2025-08-05 Preface This is a user manual written using Bookdown, which provides a detailed user guide for SpaceSequest. Cover Image: Overview of SpaceSequest components. SpaceSequest contains five modules to perform standarized data analysis generated from 10x Genomics Visium, Visium HD, and Xenium, as well as Bruker Corporation (acquired from the previous NanoString Technologies) GeoMx and CosMx platforms. "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Spatial transcriptomics has emerged as one of the most powerful tools for gaining biological insights, enabling researchers to uncover intricate relationships between gene expression patterns and tissue architecture. It has been recognized as the Method of the Year 2020. Recent advances in the field have resulted in a variety of new platforms, including Visium, Visium HD, and Xenium from 10x Genomics, as well as GeoMx and CosMx from Bruker/NanoString Technologies, which has now been acquired by the Bruker Corporation. However, the existence of diverse spatial transcriptomics platforms and various data formats poses challenges in standardizing data analysis. Thus, there remains a critical gap in the availability of a comprehensive pipeline capable of conducting end-to-end analysis that is necessary to extract biological insights from multiple spatial transcriptomics platforms. Here, we present SpaceSequest, a tailored pipeline that utilizes cutting-edge computational methodologies to conduct a thorough analysis, enabling the extraction of crucial biological insights from five major spatial transcriptomics technologies. SpaceSequest performs: Standardized quality control and general data processing. Key analyses customized for each spatial platform Automated cell type annotation and deconvolution High-quality figure and analysis result generation. In addition, SpaceSequest allows for smooth integration with cellxgene VIP and Quickomics for user-friendly data access and interactive visualization. SpaceSequest is a unified pipeline for spatial transcriptomics data analysis. It currently handles a wide range of data types generated from five spatial transcriptomics platforms, namely, 10x Genomics Visium, Visium HD, Xenium, Bruker/NanoString GeoMx and CosMx. This pipeline contains the following major workflows: visium This pipeline analyzes 10x Genomics Visium data. It takes SpaceRanger output directory as input, together with a config.yml file. The output will be saved in multiple folders corresponding to the name of the software used, such as, BayesSpace, c2l (cell2location), SpaGCN, SpaTalk, and tangram. visiumhd This pipeline performs analyses related to Visium HD spatial transcriptomics data. It starts the analysis from SpaceRanger bin-level outputs, and runs a series of steps for QC, cell type annotation, and clustering analysis. xenium This pipeline directly takes Xenium data as input, runs through gene/cell level quality control and various downstream analyses. cosmx This pipeline performs CosMx data analysis. This includes quality control, cell type annotation (label transfer from a reference dataset), and clustering analysis. geomx This pipeline takes GeoMx .dcc files as input, performs sample- and probe-level quality control, and runs a series of steps to call differentially expressed genes. The output will be summarized into Quickomics format for further interactive exploration. Furthermore, SpaceSequest contains three additional scripts that perform specific tasks to help spatial transcriptomics analysis: cosMx2VIP This script converts CosMx dataset to an h5ad file so the data can be visualized in Cellxgene VIP, a tool developed based on Cellxgene, but with additional features to navigate spatial transcriptomics datasets. spDEG This script provides a flexibal way to perform spatial differential expression analysis, using the h5ad or R object outputs from the SpaceSequest pipeline. getVisiumHDspotCol This function takes Visium HD data and high-resolution image as inputs, and extracts mean R, G, and B color intensities for each bin. In summary, this pipeline has the capability to analysis the following spatial transcriptomics data platforms: 10x Genomics Visium: https://www.10xgenomics.com/platforms/visium 10x Genomics Xenium: https://www.10xgenomics.com/platforms/xenium 10x Genomics Visium HD: https://www.10xgenomics.com/products/visium-hd-spatial-gene-expression NanoString GeoMx: https://nanostring.com/products/geomx-digital-spatial-profiler/geomx-dsp-overview/ NanoString CosMx: https://nanostring.com/products/cosmx-spatial-molecular-imager/ "],["installation.html", "Chapter 2 Installation", " Chapter 2 Installation SpaceSequest can be installed through a conda environment. We have tested the installation on Linux servers. Please ensure Conda is available on your device: which conda # Your conda path will be returned Then navigate to the directory you would like to install the pipeline ($PipelineDir in the following example), and execute the following commands: git clone https://github.com/interactivereport/SpaceSequest.git cd SpaceSequest # This step may take a while. Thank you for your patience bash install.sh # The .env will be created under the src directory ls $PipelineDir/SpaceSequest/src/.env #Add pipeline scripts to $PATH vim ~/.bash_profile PATH=$PATH:$PipelineDir/SpaceSequest # Close the vim text editor and source the file source ~/.bash_profile #To verify the installation, type the name of one of the main scripts, such as: visium #Output: === Welcome to &#39;visium&#39; from SpaceRequest! === Please provide either a path to a folder or a config file. An empty config file will be created if a path to a folder is provided. There are six workflows that can be directly used after successful installation of SpaceSequest: visium: Process and analyze 10x Genomics Visium data using Space Ranger outputs. visiumhd: Process and analyze 10x Genomics Visium HD data using Space Ranger outputs. xenium: Analyze 10x Genomics Xenium data generated by Xenium Ranger. cosmx: Analyze NanoString CosMx data using key files generated by the instrument. geomx: Analyze NanoString GeoMx data using dcc files, which are converted from Fastq sequencing files. cosMx2VIP: A converter script that incorporates CosMx data and high-resolution images to an h5ad output, which can be further explored by Cellxgene VIP. Additionally, we also developed a new function, named getVisiumHDspotCol, to extract RGB color from the Visium HD bins, when a high-resolution image is provided. Detailed tutorials on how to used these workflows/scripts are provided in this Bookdown document. "],["data-preparation.html", "Chapter 3 Data preparation 3.1 Visium 3.2 Visium HD 3.3 Xenium 3.4 CosMX 3.5 GeoMX", " Chapter 3 Data preparation In this section, we will go through the necessary files for each spatial transcriptomics platform, and highlight the best practice to prepare the data input files. 3.1 Visium The 10x Genomics Visium is a spatial transcriptomics platform that allows gene expression profiling while preserving the spatial location of each profiling spot (55 µm in diameter). The original sequencing output is in the FASTQ format. FASTQ files need to run through the workflow developed by 10x Genomics called Space Ranger. A detailed tutorial of Space Ranger can be found through here: https://www.10xgenomics.com/support/software/space-ranger/2.1/tutorials. Here is the file hierarchy of the original Fastq files. Reference file folder and probe set file can be downloaded from 10x Genomics website, see more details here. Here, the dataset was downloaded from an Alzheimer’s disease (AD) mouse model paper, with GEO entry: GSE203424. ~/Data └── PSAPP-CO1/ #First sample, sequenced on four lanes, with R1 and R2 for each lane ├── PSAPP-CO1_S1_L001_R1_001.fastq.gz ├── PSAPP-CO1_S1_L001_R2_001.fastq.gz ├── PSAPP-CO1_S1_L002_R1_001.fastq.gz ├── PSAPP-CO1_S1_L002_R2_001.fastq.gz ├── PSAPP-CO1_S1_L003_R1_001.fastq.gz ├── PSAPP-CO1_S1_L003_R2_001.fastq.gz ├── PSAPP-CO1_S1_L004_R1_001.fastq.gz ├── PSAPP-CO1_S1_L004_R2_001.fastq.gz └── WT-CO1 #Second sample, sequenced on two lanes, with R1 and R2 for each lane ├── WT-CO1_S1_L001_R1_001.fastq.gz ├── WT-CO1_S1_L001_R2_001.fastq.gz ├── WT-CO1_S1_L002_R1_001.fastq.gz ├── WT-CO1_S1_L002_R2_001.fastq.gz ├── WT-CO1_S1_L003_R1_001.fastq.gz ├── WT-CO1_S1_L003_R2_001.fastq.gz ├── WT-CO1_S1_L004_R1_001.fastq.gz └── WT-CO1_S1_L004_R2_001.fastq.gz └── /images/ ├── GSM6171782_WT_CO1_tissue_hires_image.tiff └── GSM6171784_PSAPP_CO1_tissue_hires_image.tiff └── Reference_files └── refdata-gex-mm10-2020-A/ Here is an example of a typical Space Ranger run, using the first sample, WT-CO1, as an example: spaceranger count --id=&quot;WT-CO1&quot; \\ --transcriptome=~/Data/Reference_files/refdata-gex-mm10-2020-A \\ --fastqs=~/Data/Fastq_files \\ --cytaimage=~/Data/Sample1.tif \\ --probe-set=~/Data/Reference_files/Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv \\ --slide=H1-ABDCEFJ \\ #Using a random slide ID for illustration --area=A1 \\ --localcores=4 \\ --localmem=256 \\ --create-bam=false Space Ranger output files: ~/Data/WT-CO1 └── outs ├── analysis/ ├── filtered_feature_bc_matrix/ ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── raw_feature_bc_matrix/ ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── spatial/ ├── aligned_fiducials.jpg ├── detected_tissue_image.jpg ├── scalefactors_json.json ├── tissue_hires_image.png ├── tissue_lowres_image.png └── tissue_positions_list.csv ├── cloupe.cloupe ├── filtered_feature_bc_matrix.h5 ├── metrics_summary.csv ├── molecule_info.h5 ├── possorted_genome_bam.bam ├── possorted_genome_bam.bam.bai ├── raw_feature_bc_matrix.h5 ├── spatial_enrichment.csv └── web_summary.html When running the SpaceSequest visium script, the workflow requires the path to the out directory of Space Ranger output. 3.2 Visium HD 10x Genomics Visium HD (High-Definition Spatial Transcriptomics) is an advanced spatial transcriptomics platform with higher spatial resolution than the standard Visium. It’s designed to capture gene expression at a finer scale - subcellular or near single-cell level. Unlike standard Visium where each spot is ~55 µm in diameter, Visium HD provides much denser arrays with smallest 2x2 µm squares. Here is the file hierarchy of the original Fastq files. Reference file folder and probe set file can be downloaded from 10x Genomics website, see more details here. ~/Data └── /Fastq_files/ #First sample, sequenced on two lanes, with R1 and R2 for each lane ├── Sample1_S1_L001_R1_001.fastq.gz ├── Sample1_S1_L001_R2_001.fastq.gz ├── Sample1_S1_L002_R1_001.fastq.gz ├── Sample1_S1_L002_R2_001.fastq.gz #Second sample, sequenced on two lanes, with R1 and R2 for each lane ├── Sample2_S2_L001_R1_001.fastq.gz ├── Sample2_S2_L001_R2_001.fastq.gz ├── Sample2_S2_L002_R1_001.fastq.gz └── Sample2_S2_L002_R2_001.fastq.gz └── /CytAssist_images/ ├── Sample1.tif └── Sample2.tif └── Reference_files ├── refdata-gex-mm10-2020-A/ └── Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv Here is an example of a typical Space Ranger run, using Sample 1 as an example: spaceranger count --id=&quot;Sample1&quot; \\ --sample=&quot;Sample1&quot; \\ --transcriptome=~/Data/Reference_files/refdata-gex-mm10-2020-A \\ --fastqs=~/Data/Fastq_files \\ --cytaimage=~/Data/Sample1.tif \\ --probe-set=~/Data/Reference_files/Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv \\ --slide=H1-ABDCEFJ \\ #Using a random slide ID for illustration --area=A1 \\ --localcores=4 \\ --localmem=256 \\ --create-bam=false Space Ranger output files: ~/Data/Sample1 └── outs ├── analysis/ ├── filtered_feature_bc_matrix/ ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── raw_feature_bc_matrix/ ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── spatial/ ├── aligned_fiducials.jpg ├── detected_tissue_image.jpg ├── scalefactors_json.json ├── tissue_hires_image.png ├── tissue_lowres_image.png └── tissue_positions_list.csv ├── cloupe.cloupe ├── filtered_feature_bc_matrix.h5 ├── metrics_summary.csv ├── molecule_info.h5 ├── possorted_genome_bam.bam ├── possorted_genome_bam.bam.bai ├── raw_feature_bc_matrix.h5 ├── spatial_enrichment.csv └── web_summary.html When running the SpaceSequest visiumhd script, the workflow requires the path to the out directory of Space Ranger output. 3.3 Xenium 10x Genomics Xenium is a next-generation in situ spatial transcriptomics platform which is distinct from Visium and Visium HD. Unlike Visium, which captures RNA via barcoded spots followed by sequencing, Xenium directly detects transcripts on the tissue section through highly multiplexed fluorescence imaging. This approach allows single-molecule resolution and subcellular spatial mapping of hundreds to thousands of genes simultaneously, resulting in true in situ transcriptomics measurements. Xenium data can be processed by 10x Genomics Xenium Ranger software. A detailed overview can be found at: https://www.10xgenomics.com/support/software/xenium-ranger/latest. Outputs from Xenium Onboard Analysis (XOA) can be used to run Xenium Ranger, as described here. The output files of Xenium Ranger run on a test dataset is available through the following website from 10x Genomics: https://www.10xgenomics.com/datasets/xenium-human-brain-preview-data-1-standard. ~/Data/Xenium └── outs #output folders ├── analysis/ ├── filtered_feature_bc_matrix/ ├── barcodes.tsv.gz ├── features.tsv.gz └── matrix.mtx.gz ├── cell_features/ ├── cell_id/ ├── cell_summary/ ├── density/ ├── grids/ ├── masks/ ├── polygon_num_vertices/ ├── polygon_vertices/ ├── seg_mask_value/ #Single files ├── analysis_summary.html ├── analysis.tar ├── analysis.zarr.zip ├── cell_boundaries.csv.gz ├── cell_boundaries.parquet ├── cell_feature_matrix.h5 ├── cell_feature_matrix.tar ├── cell_feature_matrix.zarr.zip ├── cells.csv.gz ├── cells.parquet ├── cells.zarr.zip ├── experiment.xenium ├── gene_panel.json ├── metrics_summary.csv ├── morphology_focus.ome.tif ├── morphology_mip.ome.tif ├── morphology.ome.tif ├── nucleus_boundaries.csv ├── nucleus_boundaries.parquet ├── transcripts.csv.gz ├── transcripts.parquet └── transcripts.zarr.zip 3.4 CosMX NanoString (Now Bruker Corporation) CosMx Spatial Molecular Imager (SMI) is a highly multiplexed, single-molecule in site spatial transcriptomics platform designed for subcellular-resolution spatial profiling of RNA and proteins. It differs from 10x platforms (Visium, Visium HD, Xenium) in that it captures direct spatial imaging=-based transcript detection with ultra-high plex (up to thousands of genes) and provides spatially resolved single-cell and subcellular data across the whole imaging region. Here, we use an demo dataset from the NanoString website: CosMx Human Frontal Cortex FFPE Dataset. ~/S3/ ├── S3_exprMat_file.csv ├── S3_fov_positions_file.csv ├── S3_metadata_file.csv ├── S3-polygons.csv └── S3_tx_file.csv These input files are sufficient to run the SpaceSequest cosmx workflow. If you are interested in incorporting the images, additional files need to be downloaded. The download link for: flatFiles (1.95 Gb) https://smi-public.objects.liquidweb.services/6k_release/flatFiles.zip, and RawFiles (602 Gb) https://smi-public.objects.liquidweb.services/6k_release/RawFiles.zip. Please be careful to click the links directly as they are very large zip files. 3.5 GeoMX Last but not least, NanoString GeoMx Digital Spatial Profiler (DSP) is a spatial transcriptomics (and also proteomics) platform designed for profiling gene expression and proteins in a region-of-interest (ROI)-based manner. GeoMx does not capture continuous spatial data across an entire tissue section. Instead, it relies on user-defined ROIs, allowing targeted, high-plex profiling in selected tissue compartments, such as tumor and neighborhood non-tumor cells. GeoMx libraries can be sequenced using a sequencer, which generate FASTQ files. Illumina data analysis platform provides GeoMx® NGS Pipeline, which can be directly used to convert FASTQ to DCC files. Other software suite may also include this pipeline, such as Cumulus. The converted files are text files with .dcc as suffix. These DCC files can directly be used to run SpaceSequest geomx workflow. "],["visium-1.html", "Chapter 4 Visium 4.1 Space Ranger run 4.2 Pipeline run 4.3 Results", " Chapter 4 Visium 10x Genomics Visium is a revolutionary technology that detects RNA expression and spatial location at the same time. Unlike traditional single-cell RNA-seq, which loses spatial information, Visium enables researches to map where gene activity occurs within the architecture of the intact tissue. In detail, tissue sections can be placed on specialized Visium slides that contain an array of spatially barcoded capture spots. Each spot captures mRNA transcripts from the overlying tissue area, and at the same time, records the spatial location using the barcodes. After high-throughput sequencing, these data can be mapped back onto high-resolution tissue images, allowing researchers to analyze the gene expression patterns from distinct histological regions. 10x Genomics Visium slides and barcoded spots: As illustrated in the figure above, each 10x Genomics Visium slide has multiple captures (4 for regular 6.5x6.5 mm, or 2 for 11x11 mm). The barcoded spots are 55 μm in diameter, with gaps between each spot. (Image from: https://www.10xgenomics.com/) SpaceSequest Visium workflow: The Visium pipeline takes Space Ranger outputs and performs a series of analysis using multiple state-of-the-art tools, including BayesSpace, Cell2location, SpaGCN, Tangram, and SpaTalk. 4.1 Space Ranger run If you start the analysis from FASTQ raw data, Space Ranger is necessary to process the data to gene expression count matrix, with spatial barcodes resolved. As we mentioned before, Space Ranger requires FASTQ files, high-resolution images, as well as key files (genome index, etc.) to run. We have illustrated these steps using a publicly available Visium data from an Alzheimer’s disease (AD) mouse model paper, with GEO entry: GSE203424. See the data preparation section 3.1. A typical Space Ranger run command for Visium: spaceranger count --id=&quot;WT-CO1&quot; \\ --transcriptome=~/Data/Reference_files/refdata-gex-mm10-2020-A \\ --fastqs=~/Data/Fastq_files \\ --cytaimage=~/Data/Sample1.tif \\ --probe-set=~/Data/Reference_files/Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv \\ --slide=H1-ABDCEFJ \\ #Using a random slide ID for illustration --area=A1 \\ --localcores=4 \\ --localmem=256 \\ --create-bam=false This will generate the Space Ranger results that can be used to run SpaceSequest: ~/SpaceSequest_demo/1_Visium/ ├── Input_data/ └── Demo_PSAPP.3Rep.Azimuth.Reference.h5ad #Downloaded from Azimuth website └── SpaceRanger/ ├── PSAPP-CO1/ ├── ... └── out/ ├── PSAPP-CO1/ ├── PSAPP-TAM1/ └── PSAPP-TAM1/ 4.2 Pipeline run Here, we use the following run directory as an example: ~/SpaceSequest_demo/1_Visium Demo data: 10x Visium data are from mouse brain (paper, and GEO record). Also, we downloaded the Azimuth mouse brain cortex reference for cell type deconvolution, with the following link: https://seurat.nygenome.org/azimuth/demo_datasets/allen_mop_2020.rds. The first step is to generate the config and sampleMeta files by running the visium command by passing the working directory. visium ~/SpaceSequest_demo/1_Visium After this step, users can fill in the config.yml file and the sample.csv file. Please pay attention to the required items in the config.yml file as they are essential for the pipeline to run. #Highlighting several key items: prj_name: Visium_demo #Prefix of the final output output: ~/SpaceSequest_demo/1_Visium/Run_pipeline #Output directoy will be created by the pipeline methods: [SpaGCN,BayesSpace,cell2location,tangram,SpaTalk] #Software to run #cell2location setting. This is for cell type deconvolution using a reference single-cell RNA-seq data scH5ad: ~/SpaceSequest_demo/1_Visium/Input_data/Demo_PSAPP.3Rep.Azimuth.Reference.h5ad annotation_obs: Cell_type # tangram setting. This is for cell type deconvolution to map scRNA-seq to the spatial data and image tg_scH5ad: ~/SpaceSequest_demo/1_Visium/Input_data/Demo_PSAPP.3Rep.Azimuth.Reference.h5ad tg_annotation_obs: Cell_type # SpaTalk seting. This is for cell-cell communication analysis st_scH5ad: ~/SpaceSequest_demo/1_Visium/Input_data/Demo_PSAPP.3Rep.Azimuth.Reference.h5ad st_annotation_obs: Cell_type #Parallel and memory setting parallel: &quot;slurm&quot; #Use &quot;slurm&quot; for Edge HPC core: 10 memory: 505G #if provided (e.g. 100G), it will be used to request cluster scheduler jobID: j47 # please make sure this job id is different with your other projects which would be run at the same time For the sample.csv file, the first two columns (Sample_Name,SpaceRanger_path) are required, and here we added two more columns: Sample_Name,SpaceRanger_path,Treatment,Image_hires PSAPP-CO1,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-CO1/outs,Control,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-CO1-image.png PSAPP-CO2,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-CO2/outs,Control,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-CO2-image.png PSAPP-TAM1,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-TAM1/outs,Treated,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-TAM1-image.png PSAPP-TAM2,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-TAM2/outs,Treated,~/SpaceSequest_demo/1_Visium/SpaceRanger/PSAPP-TAM2-image.png Then, move the config.yml and sample.csv into a new folder called Run_pipeline, and run the visium script by passing the config.yml parameter to it: #Run the pipeline visium ~/SpaceSequest_demo/1_Visium/Run_pipeline/config.yml Among the software used in the pipeline, SpaTalk may need more memory and time. By testing the above four datasets, 500 Gb was sufficient for SpaTalk in a test run, but 250 Gb resulted in an Out-of-memory (OOM) error. 4.3 Results Finally, users can check the results in the output directory. For each method, SpaceSequest generates a folder to store the results, for example: BayesSpace, SpaGCN, SpaTalk, etc. If there were any errors occurred, users can check the jxx (in this example, j47) folder to see the original scripts and error messages. Output directory: ~/SpaceSequest_demo/1_Visium ├── BayesSpace/ ├── ... ├── Visium_demo.pdf ├── Visium_demo_raw.rds └── Visium_demo.rds ├── c2l/ ├── model/ ├── full_sc_model.h5ad └── full_sc_model.pdf ├── PSAPP-CO1.h5ad ├── PSAPP-CO1.pdf ├── PSAPP-CO1.pkl ├── PSAPP-CO2.h5ad └── ... ├── SpaGCN/ ├── align.pdf ├── align.pkl ├── SpaGCN.pdf └── ... ├── SpaTalk/ ├── PSAPP-CO1/ #Multiple figures in each folder associated with each sample name. ├── PSAPP-CO2/ ├── PSAPP-TAM1/ ├── PSAPP-TAM1/ └── Visium_demo_C2L.h5ad ├── logNormal/ └── Visium_demo.h5ad ├── tangram/ ├── tmp ├── Visium_demo.pkl ├── Visium_demo_sc_location.h5ad └── Visium_demo_segment.h5ad ├── QC/ ├── metrics_summary.csv └── QC.pdf ├── config.yml ├── config.yml.20250719.log └── sample.csv Example outputs: Clustering results generated by BayesSpace for the Visium spatial transcriptomics dataset. Cell2location result for cell type deconvolution using single-cell RNA-seq data, guided by a reference downloaded from Azimuth. SpaGCN result for spatial domain identification. "],["visium-hd-1.html", "Chapter 5 Visium HD 5.1 Space Ranger run 5.2 Pipeline setup 5.3 Results", " Chapter 5 Visium HD 10x Genomics Visium HD is a high-resolution spatial transcriptomics platform that captures the full transcriptome using thousands of gap-free, 2 μm squares. As one of the latest platforms that have the ability fo reach single-cell or even sub-cellular resolution, Visium HD enables researchers to discover new biology underlying certain conditions, and power the identification of disease-related biomarkers and potential therapeutic targets. The Space Ranger pipeline from 10x Genomics can be used to process FASTQ raw data to gene expression matries. By default, the Space Ranger produces outputs at 3 resolutions: 2 μm, 8 μm, and 16 μm. We use 8 μm for the first-pass analysis, as it’s not too big or too small. 10x Genomics Visium HD slide and barcoded squares: As illustrated in the figure above, each 10x Genomics Visium HD slide has two captures (A1 and D1). The barcoded gap-free squares are 2 μm in size. (Image from: https://www.10xgenomics.com/) 5.1 Space Ranger run The Space Ranger running step is very similar to Visium. Necessary files inclue Fastq path, reference directory, image, slide ID, slide location, etc. Here, we will use a public demo dataset to guide you through these steps. The two public demo datasets are from the 10x Genomics website. 1, Mouse brain FFPE sample 2, Mouse brain fixed frozen A typical Space Ranger run command for Visium HD: spaceranger count --id=&quot;Sample1_FFPE&quot; \\ --transcriptome=~/Data/Reference_files/refdata-gex-mm10-2020-A \\ --fastqs=~/Data/Fastq_files \\ --cytaimage=~/Data/Sample1_FFPE.tif \\ --probe-set=~/Data/Reference_files/Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv \\ --slide=H1-ABDCEFJ \\ #Using a random slide ID for illustration --area=D1 \\ --localcores=4 \\ --localmem=256 \\ --create-bam=false The above command was run in the SpaceRanger folder as shown below. This will generate the Space Ranger result directories that can be used to run SpaceSequest. Here, we can skip the Space Ranger run because 10x Genomics website has provided Space Ranger results, so we can directly download and use them. SpaceSequest workflow requires a directory containing both binned_outputs and spatial folders. ~/SpaceSequest_demo/2_VisiumHD/ ├── Input_data/ └── Demo_PSAPP.3Rep.Azimuth.Reference.h5ad #Downloaded from Azimuth website └── SpaceRanger/ ├── Sample1_FFPE/ ├── ... └── out/ ├── ... ├── cloupe_008um.cloupe ├── web_summary.html ├── binned_outputs/ ├── square_002um/ ├── square_008um/ └── square_016um/ └── spatial/ ├── aligned_fiducials.jpg ├── aligned_tissue_image.jpg ├── cytassist_image.tiff ├── detected_tissue_image.jpg ├── tissue_hires_image.png └── tissue_lowres_image.png └── Sample2_Fixed/ ├── ... └── out/ ├── ... ├── cloupe_008um.cloupe ├── web_summary.html ├── binned_outputs/ ├── square_002um/ ├── square_008um/ └── square_016um/ └── spatial/ 5.2 Pipeline setup To illustrate the pipeline setup steps, we set the running directory to be: ~/SpaceSequest_demo/2_VisiumHD/ As the above step showed, we need to place the result folders (binned_outputs, spatial) inside each data folders (out folder under Sample1_FFPE and Sample2_Fixed). The first step is to generate the config and sampleMeta files by running the visiumhd command by passing the working directory to it. visiumhd ~/SpaceSequest_demo/2_VisiumHD After this step, fill in the config.yml file and the sampleMeta.csv file as below. project_ID: VisiumHD_demo #required sampleMeta: ~/SpaceSequest_demo/2_VisiumHD/sampleMeta.csv #path to the sampleMeta file output_dir: ~/SpaceSequest_demo/2_VisiumHD/output #output directory bin_resolution: 8um #defaul 8um, also 16um or 2um are available cluster_resolution: 0.3 #resolution for the FindClusters step reference: ~/SpaceSequest_demo/2_VisiumHD/Reference/allen_mop_2020.rds #path to an Azimuth reference data, optional reference_name: subclass #column name of the cell type label you would like to transfer integrate_data: True #True or False to merge/integrate all the data in the sampleMeta file integrate_with_harmony: True #True or False to use Harmony for integration. Default as True The sampleMeta.csv file contains file name and path to the Space Ranger output. It needs to have the binned_outputs inside. The first column sets the sample names for the final output files. Sample,Directory Mouse_brain_FFPE,~/SpaceSequest_demo/2_VisiumHD/Sample1_FFPE/outs Mouse_brain_FixedFrozen,~/SpaceSequest_demo/2_VisiumHD/Sample2_Fixed/outs Finally submit the following command: #Run the data visiumhd ~/SpaceSequest_demo/2_VisiumHD/config.yml Finally check the results in the output_dir folder specified in the config.yml file. The output files contain several figures (QC plots, UMAP), and multiple Rdata files storing the results. 5.3 Results The output directory contains processing results for each individual data, as well as integrated dataset, if the integrate_data parameter was set to True. Main results in the directory: ~/SpaceSequest_demo/2_VisiumHD #For Mouse_brain_FFPE ├── ... ├── VisiumHD_demo.Mouse_brain_FFPE.RData ├── VisiumHD_demo.Mouse_brain_FFPE.plot.count_feature.png ├── VisiumHD_demo.Mouse_brain_FFPE.plot.counts.png ├── VisiumHD_demo.Mouse_brain_FFPE.plot.Spatial.annotated_cluster.png ├── VisiumHD_demo.Mouse_brain_FFPE.plot.Spatial.cluster.png ├── VisiumHD_demo.Mouse_brain_FFPE.plot.UMAP.full.png └── VisiumHD_demo.Mouse_brain_FFPE.plot.UMAP.sketch.png #For Mouse_brain_FFPE ├── ... ├── VisiumHD_demo.Mouse_brain_FixedFrozen.RData ├── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.count_feature.png ├── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.counts.png ├── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.Spatial.annotated_cluster.png ├── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.Spatial.cluster.png ├── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.UMAP.full.png └── VisiumHD_demo.Mouse_brain_FixedFrozen.plot.UMAP.sketch.png #Integrated results ├── ... ├── VisiumHD_demo.integrated.RData ├── VisiumHD_demo.integrated.plot.UMAP.annotated.full.png ├── VisiumHD_demo.integrated.plot.UMAP.dataset.full.png ├── VisiumHD_demo.integrated.plot.UMAP.original_cluster.full.png └── VisiumHD_demo.integrated.plot.UMAP.original_cluster.sketch.png Some example figures: Visium HD spatial-transcriptomics output. (Left) Tissue image with capture spots overlaid. (Right) UMAP embedding of spatial barcodes colored by cluster. Additional Visium HD results. (Left) Gene expression counts (nCount) at 8 μm resolution. (Right) Cell type annotation on the spatial tissue. "],["xenium-1.html", "Chapter 6 Xenium 6.1 Input preparation 6.2 Pipeline setup 6.3 Results", " Chapter 6 Xenium 10x Xenium In Situ is a probe-based, single-cell resolution spatial transcriptomics platform. With its advanced probe design and high-resolution imaging techniques, Xenium is able to detect sub-cellular resolution gene expression with accurate cell type segmentation. Xenium platform allows researchers to analyze hundreds of even thousands of genes with ease. Currently, it supports multiple panels, including 1) Off-the-shelf panel of 50-5,000 genes, 2) Fully customizable panel of 480 genes, and 3) Customized TCR/BCR, SNVs, and isoform panels. 10x Genomics Xenium workflow: As illustrated in the figure above, the whole workflow contains sample preparation, probe hybridization, imaging, and downstream data analysis. (Image from: https://www.10xgenomics.com/) 6.1 Input preparation Here, we illustrate data preparation using a public Xenium dataset provided by 10x Genomics. This Xenium Human Brain Preview Data has been analyzed using Xenium Onboard Analysis 1.3.0. Users can download the full results by clicking the ‘Output and Supplemental files tab’. The zip file Xenium_V1_FFPE_Human_Brain_Healthy_With_Addon_outs.zip is 5.1 Gb in size, the the decompressed is about 6 Gb. ~/SpaceSequest_demo/3_Xenium/ ├── data/ #Directories: ├── analysis/ ├── cell_feature_matrix/ ├── cell_features/ ├── cell_id/ ├── cell_summary/ ├── density/ ├── grids/ ├── masks/ ├── polygon_num_vertices/ ├── polygon_vertices/ └── seg_mask_value/ #Single files: ├── analysis_summary.html ├── analysis.tar ├── analysis.zarr.zip ├── cell_boundaries.csv.gz ├── cell_boundaries.parquet ├── cell_feature_matrix.h5 ├── cell_feature_matrix.tar ├── cell_feature_matrix.zarr.zip ├── cells.csv.gz ├── cells.parquet ├── cells.zarr.zip ├── experiment.xenium ├── gene_panel.json ├── metrics_summary.csv ├── nucleus_boundaries.csv ├── nucleus_boundaries.parquet ├── transcripts.csv.gz ├── transcripts.parquet └── transcripts.zarr.zip #Images ├── morphology_focus.ome.tif ├── morphology_mip.ome.tif └── morphology.ome.tif 6.2 Pipeline setup Demo run directory: ~/SpaceSequest_demo/3_Xenium Demo data: FFPE Human Brain data from 10x: https://www.10xgenomics.com/datasets/xenium-human-brain-preview-data-1-standard, as described in the previous section. The Xenium raw data is stored at ~/SpaceSequest_demo/3_Xenium/data with h5, cell_boundaries, transcripts, etc. This directory needs to be specified in the sampleMeta.csv file, which will be mentioned later. #First step, generate the config and sampleMeta files xenium ~/SpaceSequest_demo/3_Xenium/ After this step, users need to fill in the config.yml file and the sampleMeta.csv file as below. Please pay attention to the required items in the config.yml file as they are essential for the pipeline to run: #Highlighting several key items: project_ID: Xenium_demo #required sampleMeta: ~/SpaceSequest_demo/3_Xenium/sampleMeta.csv #path to the sampleMeta file, required. It will create this dir for you if it doesn&#39;t exist output_dir: ~/SpaceSequest_demo/3_Xenium/output #output directory, required cluster_resolution: 0.3 #resolution for the FindClusters step reference: humancortexref #Azimuth reference, for example, &#39;humancortexref&#39;, optional reference_name: subclass #column name of the cell type label you would like to transfer. Required if reference is used. integrate_data: True #True or False to merge/integrate all the data in the sampleMeta file integrate_with_harmony: True #True or False to use Harmony for integration. Default as True For the sampleMeta.csv file, the first two columns are required: Sample and Directory. Users can add more metadata columns as shown below: Sample,Directory,Tissue,Species Human_brain,~/SpaceSequest_demo/3_Xenium/data,Brain,Human Then we can run the xenium script by passing the config.yml to it. We suggest submitting the command using sbatch as the process takes time to run: #Run the data xenium ~/SpaceSequest_demo/3_Xenium/config.yml The pipeline will process/QC the data, run clustering and cell type annotation (if reference provided), and finally return an integrated Rdata file. All plots and files are stored in the output_dir directory specified in the config.yml file. 6.3 Results After running the workflow, the ouptut directory specified in the config.yml file will contain result files associated with each individual data, as well as an integrated file for all the samples involved in the analysis, if integrate_data: True was set. Key results in the directory: ~/SpaceSequest_demo/3_Xenium #Human_brain data ├── ... ├── Xenium_demo.Human_brain.RData ├── Xenium_demo.Human_brain.plot.nFeature_nCount_Vln.pdf ├── Xenium_demo.Human_brain.plot.original_cluster.tissue.pdf └── Xenium_demo.Human_brain.plot.original_cluster.UMAP.pdf #Integrated data ├── ... ├── Xenium_demo.integrated.RData └── Xenium_demo.integrated.plot.dataset.pdf Xenium spatial-transcriptomics output. (Left) Tissue image with capture spots overlaid. (Right) UMAP embedding of spatial barcodes colored by cluster. "],["geomx-1.html", "Chapter 7 GeoMX 7.1 FASTQ to DCC conversion 7.2 Pipeline setup 7.3 Results 7.4 Quickomics exploration", " Chapter 7 GeoMX GeoMx™ Digital Spatial Profiler (DSP) is a spatial transcriptomics platform developed by NanoString Technologies (Now Bruker Corporation), allowing researchers to quantify RNA and/or protein expression using FFPE (formalin-fixed, paraffin-embedded) or fresh frozen samples. GeoMx enables high-plex, spatially resolved profiling of tissues based on user-defined Region of interests (ROIs). These ROIs can be defined using multiple staining markers, and each ROI usually has at least 50–100 cells, but ideally 100–300+ cells per ROI for robust RNA signal. Thus, GeoMx cannot provide single-cell resolution spatial transcriptomics readout, but it allows better capture of lowly-expressed genes, due to its mini-bulk strategy. GeoMx experiment can be sequenced using NGS high-throughput sequencing, or counted using NanoString nCounter. Here, we discuss the data analysis using NGS-based readout, with DCC as pipeline input format. GeoMx workflow: This figures shows the general workflow of GeoMx experiment. The whole workflow contains sample preparation, imaging, data collection, and downstream data analysis. (Image from: https://nanostring.com/products/geomx-digital-spatial-profiler/geomx-dsp-overview/) 7.1 FASTQ to DCC conversion NanoString Technologies (Now Bruker Corporation) provides a toolkit to process GeoMx readout in the FASTQ format. As described here, users can follow the instruction and generate files with .dcc as suffix for downstream analysis. Another useful user manual is available at: GeoMx DSP NGS Readout User Manual 7.2 Pipeline setup Demo run directory: ~/SpaceSequest_demo/4_GeoMx Here, we will demonstrate the pipeline using a public dataset provided by NanoString Technologies. The FASTQ-&gt;DCC step has already been run for this data, so we can directly start from DCC file processing. The demo dataset is a public data provided by NanoString: http://nanostring-public-share.s3-website-us-west-2.amazonaws.com/GeoScriptHub/Kidney_Dataset_for_GeomxTools.zip. After unzipping this file, please add the following file to the annotation folder inside Kidney_Dataset, as we modified the spreadsheet to simplify this test run: https://github.com/interactivereport/SpaceSequest/blob/gh-pages/tutorial/02-Introduction.Rmd This is a kidney dataset, and in our demo run, we will run data processing, quality control, and differential expression analysis by comparing two kidney cell types: Glomerulus v.s. Tubule First, we initiate the pipeline using the following script. This will generate templates of config.yml and compareInfo.csv: #First step, generate config and sampleMeta file geomx ~/SpaceSequest_demo/4_GeoMx After this step, fill in the config.yml file and the sampleMeta.csv file as below: #config file for GeoMx. Please avoid using spaces in names or paths. All items are required. project_ID: GeoMx_demo #name of the project data_path: ~/SpaceSequest_demo/4_GeoMx/Kidney_Dataset/dccs #path to DCC files data_annotation: ~/SpaceSequest_demo/4_GeoMx/Kidney_Dataset/annotation/kidney_demo_AOI_Annotations_selected_clean.xlsx #sample meta information annotation_sheet: Template #Sheet name of annotation Excel file pkcs_file: ~/SpaceSequest_demo/4_GeoMx/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc #path to the pkc file output_dir: ~/SpaceSequest_demo/4_GeoMx/results #path for output files comparison: ~/SpaceSequest_demo/4_GeoMx/compareInfo.csv #comparison file to define DE groups quickomics: True Then prepare the compareInfo.csv file to define differential expression analysis comparisons: CompareName,Model,Group_name,Group_test,Group_ctrl,Analysis_method Glome_vs_Tubule,~region,region,glomerulus,tubule,Linear Currently, users can run a single linear model to call the differentially expressed genes using Q3 normalized data. Run the pipeline as below: #Run the data geomx ~/SpaceSequest_demo/4_GeoMx/config.yml Finally check the results in the output_dir folder specified in the config.yml file. The output files contain DE analysis results, and if the quickomics parameter was set to True, it will generate multiple .csv files to create a Quickomics visualization link. An example can be found here (Q3 normalized values were used to create the link): http://compbio.biogen.com:3838/Quickomics/?unlisted=PRJ_GeoMx_demo_Ij4YyG 7.3 Results This test run only has a simple comparison so should only take a few minutes to run. The output files are a set of .csv files containing gene expression and differential expression analysis results. These files are fully compatible with Quickomics, an R Shiny application for data exploration. Users can upload these csv files to Quickomics for downstream analysis and figure generation. Results in the directory: ~/SpaceSequest_demo/4_GeoMx/results ├── Comparison_result_1.txt #Differential expression result #Quickomics files: GeoMx_demo_Sample_metadata.csv GeoMx_demo_Exp_Q3NormData.csv GeoMx_demo_Comparison_Data.csv GeoMx_demo_ProteinGeneName_Optional.csv #Additional normalizations: GeoMx_demo_Exp_NegNormData.csv GeoMx_demo_Exp_QuantileNormData.csv NanoString Technologies (Now Bruker Corporation) suggests using Q3 normalization, which was performed using: demoData &lt;- normalize(demoData , norm_method = &quot;quant&quot;, desiredQuantile = .75, toElt = &quot;q_norm&quot;) However, additional normalization is also available, and users can upload those normalized values to Quickomics for analysis. For example, the ‘Negative Probe’ normalization was performed by the following command: target_demoData &lt;- normalize(target_demoData , norm_method = &quot;neg&quot;, fromElt = &quot;exprs&quot;, toElt = &quot;neg_norm&quot;) 7.4 Quickomics exploration Here, we upload the following four files to the Quickomics server: GeoMx_demo_Sample_metadata.csv: Sample meta information include sameple name, disease conditions, etc. GeoMx_demo_Exp_Q3NormData.csv: Gene expression values normalized by Q3 normalization GeoMx_demo_Comparison_Data.csv: Differential expression analysis results GeoMx_demo_ProteinGeneName_Optional.csv: Gene-Protein name conversion Quickomics link: https://quickomics.bxgenomics.com/?unlisted=PRJ_GeoMx_demo_238wZk A few example images from Quickomics exploration. The figure below shows GeoMx PCA and volcano plots: The following figure displays a GeoMx expression heatmap: "],["cosmx-1.html", "Chapter 8 CosMx 8.1 Input preparation 8.2 Pipeline setup 8.3 Results", " Chapter 8 CosMx CosMx Spatial Molecular Imager (SMI) from NanoString Technologies (Now Bruker Corporation) is a cutting-edge single-cell resolution spatial transcriptomics platform. Similary to 10x Genomics Xenium platform, CosMx offers subcellular-resolution imaging with multi‑omic detection, allowing researchers to capture up to 6,000 RNA targets and over 64 protein simultaneously. Moreover, it is fully compatible with formalin-fixed paraffin-embedded (FFPE) or fresh-frozen (FF) tissues, which can be applied to both basic (e.g., mouse, cell lines, etc.) and translational research (e.g., clinical samples). Since CosMx is an imaging-based platform, it does not require sequencing or additional processing of the sequences. The general workflow of a CosMx experiment has been illustrated below: CosMx workflow: The whole workflow contains sample preparation, CosMx in situ processing, and downstream analysis. (Image from: https://nanostring.com/products/cosmx-spatial-molecular-imager/single-cell-imaging-overview//) 8.1 Input preparation Here, we use public a dataset provided by NanoString to demonstrate the pipeline. This human frontal cortex FFPE data is available through: https://nanostring.com/products/cosmx-spatial-molecular-imager/ffpe-dataset/human-frontal-cortex-ffpe-dataset/. It is the first single-cell level spatial transcriptomics dataset generated by CosMx with 6,000 genes detected. Users can download the Basic Data Files through the Download Data tab. The basic data files are ~15Gb in total. In the following example, I will use two datasets, S3 and S4 to run SpaceSequest. If you don’t have S3, simply copy S3 to S4 following by renaming the files would work. ~/SpaceSequest_demo/5_CosMx/ ├── S3/ ├── S3_exprMat_file.csv ├── S3_fov_positions_file.csv ├── S3_metadata_file.csv ├── S3-polygons.csv └── S3_tx_file.csv ├── S4/ ├── S4_exprMat_file.csv ├── S4_fov_positions_file.csv ├── S4_metadata_file.csv ├── S4-polygons.csv └── S4_tx_file.csv 8.2 Pipeline setup Demo run directory: ~/SpaceSequest_demo/5_CosMx First, we initiate the pipeline using the following script. This will generate templates of config.yml and sampleMeta.csv: #First step, generate config and sampleMeta file cosmx ~/SpaceSequest_demo/5_CosMx Then, fill in the config.yml file and the sampleMeta.csv file as below: #config file for CosMx. Please avoid using spaces in names or paths. All items are required. project_ID: CoxMx_demo #required project name sampleMeta: ~/SpaceSequest_demo/5_CosMx/sampleMeta.csv #path to the sampleMeta file output_dir: ~/SpaceSequest_demo/5_CosMx/output #output directory cluster_resolution: 0.3 #resolution for the FindClusters step, default 0.3 reference: humancortexref #Azimuth reference name, optional reference_name: subclass #column name of the cell type label you would like to transfer. Required when reference is used. integrate_data: True #True or False to merge/integrate all the data in the sampleMeta file integrate_with_harmony: True #True or False to use Harmony for integration. Default as True The sampleMeta.csv file contains sample name and several key input files of CosMx: Sample,Directory,exprMat_file,fov_file,metadata_file,tx_file,polygon_file S3,~/SpaceSequest_demo/5_CosMx/data/S3,S3_exprMat_file.csv,S3_fov_positions_file.csv,S3_metadata_file.csv,S3_tx_file.csv,S3-polygons.csv S4,~/SpaceSequest_demo/5_CosMx/data/S4,S4_exprMat_file.csv,S4_fov_positions_file.csv,S4_metadata_file.csv,S4_tx_file.csv,S4-polygons.csv Then run the pipeline as below: #Run the data cosmx ~/SpaceSequest_demo/5_CosMx/config.yml 8.3 Results Finally check the results in the output_dir folder specified in the config.yml file. The output files contain several figures (UMAP for original cluster and annotated cell types), and Rdata files storing the results. Figure 4. CosMX spatial-transcriptomics output. (Left) Tissue image with capture spots overlaid. (Right) UMAP embedding of spatial barcodes colored by cluster. "],["additional-tools.html", "Chapter 9 Additional tools 9.1 cosMx2VIP 9.2 spDEG 9.3 Visium HD color function", " Chapter 9 Additional tools In this section, we introduce three additional tools to further analyze spatial transcriptomics data. 9.1 cosMx2VIP We have introduced previously that NanoString CosMx data can be analyzed through SpaceSequest cosmx workflow. However, the cosmx workflow does not incorporate the original images for visualization. Here, we developed another tool, called cosMx2VIP, to add CosMx images to the gene expression data, creating an integrated object, which can be further visualized by Cellxgene VIP. Cellxgene VIP not only hosts single-cell RNA-seq datasets, it also loads spatial transcriptomics data and displays the image and data simultaneously. Here, we will go through the process step-by-step. 9.1.1 Input file set up In this section, we will go through input files that are necessary for running the cosMx2VIP workflow. Here, we use the public CosMx dataset from NanoString website again: Human frontal cortex FFPE data is available through: https://nanostring.com/products/cosmx-spatial-molecular-imager/ffpe-dataset/human-frontal-cortex-ffpe-dataset/ Since cosMx2VIP integrates the data and the image, it requires the images as well. Thus, we will need to download both Basic Data Files and Raw Data Export. The Basic Data Files will be a .zip file with ~15 Gb, while the Raw Data Export contains a large RawFiles.zip file with ~602 Gb. Please make sure you have enough space to store those files. Unzipping the RawFiles.zip file resulted in the following folders. Also attached the S3 folder unzipped from Basic Data Files: ~/SpaceSequest_demo/6_cosMx2VIP/ ├── S3/ # S3 data files ├── S3_exprMat_file.csv ├── S3_fov_positions_file.csv ├── S3_metadata_file.csv ├── S3-polygons.csv ├── S3_fov_path.csv #This file is not downloaded from the NanoString website. See below for more details to create this file. └── S3_tx_file.csv # More folders in the RawFiles.zip: ├── CellStatsDir/ ├── CellComposite/ ├── CellOverlay/ ├── FOV001/ ├── FOV002/ ├── ... ├── FOV392/ ├── Morphology2D/ ├── Morphology3D/ └── RnD/ ├── RunB1324_S3_c_v6/ ├── FOV001/ ├── FOV002/ ├── ... └── FOV392/ └── RunSummary/ ├── FovTracking/ ├── Shading/ ├── Affine_Transform_20220928.csv ├── c902.fovs.csv ├── latest.af.fovs.csv ├── latest.fovs.csv ├── Morphology_ChannelID_Dictionary.txt ├── MR-Tissue - All Channels.mkit ├── RunRunB1324_20230504_231244_S3_Beta04_ExptConfig.txt ├── RunRunB1324_20230504_231244_S3_Beta04_SpatialBC_Metrics4D.csv └── temp.devapptemp Another critical file for cosMx2VIP to run is the S3_fov_path.csv file. This file is not provided by NanoString, and needs to be set up manually. It provides the directory of each fov as well as the associated image file location fov_img. ‘…’ indicates the omitted lines for simplification: fov,fov_img 1,/SpaceSequest_demo/6_cosMx2VIP/CellStatsDir/FOV001/CellLabels_F001.tif 2,/SpaceSequest_demo/6_cosMx2VIP/CellStatsDir/FOV002/CellLabels_F002.tif ... 392,/SpaceSequest_demo/6_cosMx2VIP/CellStatsDir/FOV001/CellLabels_F392.tif 9.1.2 Run the workflow The first step is to run the script with a path to the working directory: cosMx2VIP ~/SpaceSequest_demo/6_cosMx2VIP/ This will generate the following config.yml. Users can fill in the file using the example below: ## Please modify &quot;required&quot; section prj_name: CosMx2VIP_demo # the name of the project which will be used as prefix of all file created output: ~/SpaceSequest_demo/6_cosMx2VIP/ expression_file: ~/SpaceSequest_demo/6_cosMx2VIP/S3/S3_exprMat_file.csv # the path to the expression file for all FOV of a capture meta_file: ~/SpaceSequest_demo/6_cosMx2VIP/S3/S3_metadata_file.csv # the path to the meta file for all FOV of a capture cell_polygon_file: ~/SpaceSequest_demo/6_cosMx2VIP/S3/S3-polygons.csv # the path to the cell polygon file for all FOV of a capture transcript_loc_file: ~/SpaceSequest_demo/6_cosMx2VIP/S3/S3_tx_file.csv # the path to the transcript location file for all FOV of a capture fov_image_file: ~/SpaceSequest_demo/6_cosMx2VIP/S3/S3_fov_path.csv # the file path to the csv link the meta FOV column to image file path, # two columns: first column is the FOV identifier the same as meta file (same column header); # the second (&quot;fov_img&quot;) is the file path to the FOV image cell_id_col: [cell_ID,cellID] # the column header (first one in order) of cell ID in all data across files defined in above sample_meta suffix_local_px: _local_px # the suffix of pix location in one capture image, such that x coordinates column header is regular expression &quot;.*x.*_local_px&quot; suffix_global_px: _global_px # the suffix of pix location in global image, such that x coordinates column header is regular expression &quot;.*x.*_global_px&quot; saveLocalX: false # should the local cell center coordinates to be saved into obsm.X_ tx_col: target # the column header of transcripts in transcript location files After setting up the above config.yml file, run the following command: cosMx2VIP ~/SpaceSequest_demo/6_cosMx2VIP/config.yml 9.1.3 Results The output of this script is an integrated h5ad file: -rw-r----- 1 user user 53G Jul 9 15:51 CosMx2VIP_demo.h5ad This file can be further opened by Cellxgene VIP, with detailed instruction provided in this tutorial. 9.2 spDEG spDEG is a wrapper script for differential expression analysis using the output generated from SpaceSequest. 9.2.1 Input file set up The input file can be h5ad file or Rdata file generated by SpaceSequest. However, if you are using the Rdata file, users need to save the count matrix to rds and meta table to rds files and provide them to the function instead of h5ad in the .yml file: UMI: #required, can be a matrix rds or a h5ad file meta: #required, can be a cell annotation data.frame rds or a h5ad file 9.2.2 Run the workflow To initialize the analysis, users can run the following command and create the config.yml file: spDEG ~/SpaceSequest_demo/7_spDEG The above script will generate two files: config.yml and DEG_info.csv file. Fill in the config.yml file as below: UMI: ~/SpaceSequest_demo/1_Visium/Run_pipeline/Visium_demo.h5ad # required, can be a matrix rds or a h5ad file meta: ~/SpaceSequest_demo/1_Visium/Run_pipeline/Visium_demo.h5ad # required, can be a cell annotation data.frame rds or a h5ad file output: /mnt/depts/dept04/compbio/projects/SpaceSequest_demo/8_spDEG DBname: test_spDEG parallel: False # False or &quot;sge&quot; or &quot;slurm&quot; core: 1 # if the above is True, all DEG jobs will be parallel locally, a DEG job a core memory: 16G newProcess: False # False use existing DEG results jobID: j23 # an unique identifier across all YOUR parallel jobs DEG_desp: ~/SpaceSequest_demo/7_spDEG/DEG_info.csv # required for DEG analysis #More lines omitted ... Then fill out the DEG_info.csv file to set up the differential expression comparisons: compare_TAM_vs_CO_NEBULA,Sample_ID,final_label,Treatment,Treated,Control,,NEBULA,HL compare_TAM_vs_CO_DESeq2,Sample_ID,final_label,Treatment,Treated,Control,,DESeq2, 9.2.3 Results Results will be generated in the directories under test_spDEG, the name set up in the config.yml file by the DBname parameter: spDEG ~/SpaceSequest_demo/7_spDEG ├── test_spDEG ├── compare_TAM_vs_CO_NEBULA ├── compare_TAM_vs_CO_NEBULA__final_label:Astro__DESeq2.csv ├── ... └── compare_TAM_vs_CO_DESeq2 ├── compare_TAM_vs_CO_DESeq2__final_label:Astro__DESeq2.csv ├── ... An example of the output .csv file: &quot;ID&quot;,&quot;log2FC&quot;,&quot;se&quot;,&quot;Pvalue&quot;,&quot;FDR&quot;,&quot;method&quot;,&quot;algorithm&quot;,&quot;cluster&quot; &quot;GeneA&quot;,-0.1,0.1,0.16,0.24,&quot;DESeq2&quot;,&quot;lfcShrink&quot;,&quot;Astro&quot; ... 9.3 Visium HD color function To facilitate the analysis of Visium HD and extract meaningful information from the image, we developed a new function called getVisiumHDspotCol to calculate the mean RGB intensities when a paired high-resolution immunofluorescence (IF) image is available. This function is similar to the squidpy.im.calculate_image_features function provided by Squidpy. However, we apply this function to Visium HD bins (for example, 2μm bins) and generate R, G, B color intensities. The getVisiumHDspotCol function: This function takes Visium HD data and an immunofluorescence (IF) image as input, calculates a matrix indicating the average Red, Green, and Blue color intensities in each bin. Users can select the bin size before the calculation. 9.3.1 Input prerequisites To use the getVisiumHDspotCol function, users need to have the immunofluorescence staining image generated during the experiment. Such image may have multiple markers stained. For example, the following run includes the IF image associated with the Visium HD data through passing the jpg file using the colorizedimage parameter: spaceranger count --id=&quot;WT-CO1&quot; \\ --transcriptome=~/Data/Reference_files/refdata-gex-mm10-2020-A \\ --fastqs=~/Data/Fastq_files \\ --cytaimage=~/Data/Sample1.tif \\ --colorizedimage=~/Data/images_fluorescence/WT-CO1.jpg \\ --probe-set=~/Data/Reference_files/Visium_Mouse_Transcriptome_Probe_Set_v2.0_mm10-2020-A.csv \\ --slide=H1-ABDCEFJ \\ #Using a random slide ID for illustration --area=A1 \\ --localcores=4 \\ --localmem=256 \\ --create-bam=false After Space Ranger run, the images can be found in the spatial directory under the outs folder: ~/SpaceSequest/ ├──src/ ├── ... └── getVisiumHDspotCol.R ~/Data/WT-CO1/ # High-resolution images ├── WT-CO1_IF_image_original.jpg # Space Ranger output ├── ... ├── binned_outputs/ ├── cloupe_008um.cloupe ├── outs/ ├── spatial/ ├── aligned_fiducials.jpg ├── aligned_tissue_image.jpg ├── cytassist_image.tiff ├── detected_tissue_image.jpg ├── tissue_hires_image.png └── tissue_lowres_image.png 9.3.2 Run the function library(Seurat) library(ggplot2) library(jpeg) library(BiocParallel) library(Matrix) source(&quot;~/SpaceSequest/src/getVisiumHDspotCol.R&quot;) #Input files localdir &lt;- &quot;~/Data/WT-CO1/outs&quot; hires_image &lt;- &quot;~/Data/WT-CO1/outs/binned_outputs/square_008um/spatial strImg &lt;- &quot;~/Data/WT-CO1/WT-CO1_IF_image_original.jpg&quot; prefix &lt;- &quot;WT-CO1&quot; #Process Visium HD data using Seurat 5 hires = Read10X_Image(hires_image, image.name = &quot;tissue_hires_image.png&quot;) object &lt;- Load10X_Spatial(data.dir = localdir, bin.size = c(8), image = hires) object@images[[&quot;slice1.008um&quot;]]@scale.factors[[&quot;lowres&quot;]] = object@images[[&quot;slice1.008um&quot;]]@scale.factors[[&quot;hires&quot;]] #Run the function #In an internal test dataset, this step took ~3 hours to run cInfo &lt;- getVisiumHDspotCol(object,strImg,core=4) saveRDS(cInfo,paste0(prefix, &quot;.alignImage.cInfo.rds&quot;)) #Check the result head(cInfo) The result table has multiple columns, corresponding Red, Green, and Blue colors. For example, the Red color has three columns: R_mean, R_median, and R_sd, indicating the mean, median, and standard deviation of the Red color for each bin. In this example, the bin size was selected as 8 μm, but users can change it based on their need. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
